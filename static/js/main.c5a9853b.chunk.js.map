{"version":3,"sources":["store/todo-app.js","store/form-add-todo.js","components/FormAddTodo.js","components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["todos","makeAutoObservable","this","value","todo","length","unshift","id","filter","completed","fetch","then","response","json","reverse","inputVal","val","FormAddTodo","observer","className","type","FormAddTodoStore","onChange","e","changeInputVal","target","onClick","TodoAppStore","addTodo","TodoList","useEffect","fetchTodos","count","scope","map","checked","toggleTodo","title","removeTodo","App","Todo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAmCe,M,WA9Bb,aAAe,yBAFfA,MAAQ,GAGNC,YAAmBC,M,2CAGrB,SAAQC,GACN,IAAIC,EAAO,CACT,GAAMF,KAAKF,MAAMK,OAAS,EAC1B,MAASF,EACT,WAAa,GAEfD,KAAKF,MAAMM,QAAQF,K,wBAErB,SAAWG,GACTL,KAAKF,MAAQE,KAAKF,MAAMQ,QAAO,SAACJ,GAAD,OAAUA,EAAKG,KAAOA,O,wBAEvD,SAAWH,GACTA,EAAKK,WAAaL,EAAKK,Y,iBAGzB,WACE,OAAO,kFAAkBP,KAAKF,MAAMK,OAA7B,yC,wBAGT,WAAc,IAAD,OACXK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKb,MAAQ,YAAIa,GAAMC,iB,MCjB5B,M,WATb,aAAe,yBAFfC,SAAW,GAGTd,YAAmBC,M,kDAGrB,SAAec,GACbd,KAAKa,SAAWC,M,MCgBLC,EAtBKC,aAAS,WAO3B,OACE,sBAAKC,UAAU,wBAAf,UACE,uBACEA,UAAU,eACVC,KAAK,OACLjB,MAAOkB,EAAiBN,SACxBO,SAAU,SAACC,GAAD,OAAOF,EAAiBG,eAAeD,EAAEE,OAAOtB,UAC5D,wBACEgB,UAAU,4BACVC,KAAK,SACLM,QAfN,WACEC,EAAaC,QAAQP,EAAiBN,UACtCM,EAAiBG,eAAe,KAU9B,oECyBSK,EAtCEX,aAAS,WAMxB,OAJAY,qBAAU,WACRH,EAAaI,eACZ,IAGD,qCACE,cAAC,EAAD,IACA,uBACA,mBAAGZ,UAAU,aAAb,SAA0B,iCAASQ,EAAaK,UAChD,uBACA,wBAAOb,UAAU,QAAjB,UACE,gCACE,qBAAIA,UAAU,cAAd,UACE,oBAAIc,MAAM,QACV,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,8DACA,oBAAIA,MAAM,MAAV,mEAGJ,gCACGN,EAAa3B,MAAMkC,KAAI,SAAC9B,GAAD,OACtB,qBAAIe,UAAU,YAAd,UACE,6BAAI,uBAAOC,KAAK,WAAWe,QAAS/B,EAAKK,UAAWa,SAAU,kBAAMK,EAAaS,WAAWhC,QAC5F,6BAAKA,EAAKG,KACV,oBAAIY,UAAU,aAAd,SAA4Bf,EAAKiC,QACjC,6BACE,wBAAQlB,UAAU,iBAAiBO,QAAS,kBAAMC,EAAaW,WAAWlC,EAAKG,KAA/E,mBAL2BH,EAAKG,kBCjBjCgC,MARf,WACE,OACE,qBAAKpB,UAAU,gBAAf,SACE,cAACqB,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c5a9853b.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\n\r\nclass TodoAppStore {\r\n  todos = [];\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  addTodo(value) {\r\n    let todo = {\r\n      \"id\": this.todos.length + 1,\r\n      \"title\": value,\r\n      \"completed\": false\r\n    }\r\n    this.todos.unshift(todo);\r\n  }\r\n  removeTodo(id) {\r\n    this.todos = this.todos.filter((todo) => todo.id !== id)\r\n  }\r\n  toggleTodo(todo) {\r\n    todo.completed = !todo.completed;\r\n  }\r\n\r\n  get count() {\r\n    return <span>`В списке: {this.todos.length} пункт.`</span>;\r\n  }\r\n\r\n  fetchTodos() {\r\n    fetch('https://jsonplaceholder.typicode.com/todos')\r\n      .then(response => response.json())\r\n      .then(json => this.todos = [...json].reverse())\r\n  }\r\n}\r\n\r\nexport default new TodoAppStore();","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass FormAddTodoStore {\r\n  inputVal = '';\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  changeInputVal(val) {\r\n    this.inputVal = val;\r\n  }\r\n}\r\n\r\nexport default new FormAddTodoStore();","import { observer } from \"mobx-react-lite\";\r\nimport FormAddTodoStore from \"../store/form-add-todo\";\r\nimport TodoAppStore from \"../store/todo-app\";\r\n\r\nconst FormAddTodo = observer(() => {\r\n\r\n  function addTodo() {\r\n    TodoAppStore.addTodo(FormAddTodoStore.inputVal);\r\n    FormAddTodoStore.changeInputVal('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-group mt-3 mb-3\">\r\n      <input\r\n        className=\"form-control\"\r\n        type=\"text\"\r\n        value={FormAddTodoStore.inputVal}\r\n        onChange={(e) => FormAddTodoStore.changeInputVal(e.target.value)} />\r\n      <button\r\n        className=\"btn btn-outline-secondary\"\r\n        type=\"button\"\r\n        onClick={addTodo}>Добавить</button>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default FormAddTodo;\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport TodoAppStore from \"../store/todo-app\";\r\nimport FormAddTodo from \"./FormAddTodo\";\r\n\r\nconst TodoList = observer(() => {\r\n\r\n  useEffect(() => {\r\n    TodoAppStore.fetchTodos();\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <FormAddTodo />\r\n      <br />\r\n      <p className=\"text-start\"><strong>{TodoAppStore.count}</strong></p>\r\n      <br />\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr className=\"table-light\">\r\n            <th scope=\"col\"></th>\r\n            <th scope=\"col\">№</th>\r\n            <th scope=\"col\">Описание</th>\r\n            <th scope=\"col\">Удаление</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {TodoAppStore.todos.map((todo) =>\r\n            <tr className=\"todo-item\" key={todo.id}>\r\n              <td><input type=\"checkbox\" checked={todo.completed} onChange={() => TodoAppStore.toggleTodo(todo)} /></td>\r\n              <td>{todo.id}</td>\r\n              <td className=\"text-start\">{todo.title}</td>\r\n              <td>\r\n                <button className=\"btn btn-danger\" onClick={() => TodoAppStore.removeTodo(todo.id)}>X</button>\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default TodoList;","import './App.css';\nimport TodoList from './components/Todo';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}